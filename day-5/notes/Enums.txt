Enums
=====
- introduced in Java 5 (JDK 1.5). 

- it is a list of named constants. 

- enum defines a class type. 

- created using "enum" keyword. 

- each item in enum is public, static and final by default. 

- cannot instantiate an enum using "new" keyword. 

Example:

enum Subject
{
  Java, C, CPP, Android
}

Identifiers Java, C, CPP, Android are called enum constants. 

Subject sub;
sub = Subject.Java;

- we can use enums in switch..case..default

EnumTest.java
-------------
enum Subject
{
  Java, C, CPP, Android
}

class EnumTest 
{
public static void main(String[] args) 
{
 Subject sub = Subject.Java; 

 System.out.println(sub);//Java

 switch(sub){
   case Java:
	System.out.println("Selected for Java");
	break;
   case C:
    System.out.println("Selected for C");
	break;
   case CPP:
	System.out.println("Selected for C++");
	break;
   default:
	System.out.println("Selected for Mobile Apps");
	break;
  }
  System.out.println(Subject.valueOf("Java"));
 }
}

c:\>java EnumTest.java
java compiler will create
- Subject.class 
- EnumTest.class
- EnumTest$1.class


What is the order of variables in Enum? - in the order they are declared

System.out.println(Accounts.LoanAccount.ordinal()); 
ordinal() - Returns its position in enum declaration, where the initial constant is assigned an ordinal of zero
Subject.Java.ordinal() -  

EnumTest1.java
-------------
enum WeekDays
{ 
  Mon, Tue, Wed, Thu, Fri
}

class EnumTest1
{
 public static void main(String[] args)
 {
  WeekDays wk;
  wk=WeekDays.Mon;
  System.out.println("Today is "+wk);
 }
}




- every enum in Java is directly child class of java.lang.Enum class

i.e., every user defined enum is already extend java.lang.Enum, so there is no chance of extending any other class
Hence, inheritance concept is not applicable for enum

- public, default, and strictfp are only applicable modifiers for enum otherwise compile time error.

- enum can be defined inside class, outside class and not inside a method

- if enum contains only list of constants, then ending with semicolon is optional.

- enum types can be used with if..else

 Subject sub = Subject.Android;
 if(sub == Subject.Android)
   System.out.println("Android is selected");
 else
   System.out.println("Not Selected");
}


Use of Enum in Switch-Case Statements
-------------------------------------
public enum Directions{
	  EAST, 
	  WEST, 
	  NORTH, 
	  SOUTH
}
public class EnumDemo
{
   Directions dir;
   public EnumDemo(Directions dir) {
      this.dir = dir;
   }
   public void getMyDirection() {
     switch (dir) {
       case EAST:
          System.out.println("In East Direction");
          break;
                    
       case WEST:
          System.out.println("In West Direction");
          break;
                         
       case NORTH: 
          System.out.println("In North Direction");
          break;
                        
       default:
          System.out.println("In South Direction");
          break;
     }
   }
    
    public static void main(String[] args) {
        EnumDemo obj1 = new EnumDemo(Directions.EAST);
        obj1.getMyDirection();
        EnumDemo obj2 = new EnumDemo(Directions.SOUTH);
        obj2.getMyDirection();
    }
}


How to iterate through an Enum variable?
-------------------------------
class EnumDemo
{
    public static void main(String[] args) {
    	for (Directions dir : Directions.values()) {
    	    System.out.println(dir);
    	}
    }
}


values() and ValueOf( ) method
------------------------------
- all the enums have values() and valueOf() methods in them. 

- values() method returns an array of enum-type containing all the enum constants in it. 

To iterate through an Enum variable:
------------------------------------
Subject[] subjects= Subject.values();
for(Subject subj : subjects){
   System.out.print(subj+" | ");
}
System.out.println();


   public static enum-type[] values()

EnumTest1.java
--------------
enum WeekDays
{
   MON,TUE,WED,THU,FRI
}

class EnumTest1
{
public static void main(String[] args) 
{
WeekDays days[]=WeekDays.values();

for(WeekDays wk : days)
{
 System.out.println(wk);
}

System.out.println();

for(int i=0;i<days.length;i++)
{
  System.out.println(days[i]);
}
}
}

- valueOf() method is used to return the enumeration constant whose value is equal to the string passed in as argument while calling this method. 

System.out.println(Subject.valueOf("Java"));  //Java ; if that String value is not there in the enum ; then java.lang.IllegalArgumentException will be fired



- enums can have constructors, instance Variables, methods and can even implement Interfaces.

Example:

EnumDemo.java
-------------
enum Student
{
 Sunil(36), Sherif(35), Praveen(39), Naveen(29);

 private int age; 

 int getAge() 
 {
    return age; 
 }

 Student(int age)
 {
  System.out.println("** - "+age);
  this.age= age;
 }
}

class EnumDemo
{
 public static void main( String args[] )
 {
  //Student S;
  System.out.println("Age of Sunil is " +Student.Sunil.getAge()+ " years");

 Student st = Student.Sunil;
 System.out.println("Age of Sunil is " + st.getAge()+ " years");

 }
}

In this example as soon as we declare an enum variable(Student S), the constructor is called once, and it initializes age for every enumeration constant with values specified with them in parenthesis.


Enum Fields and Methods
-----------------------
enum Directions{
  EAST ("E"), 
  WEST ("W"), 
  NORTH ("N"), 
  SOUTH ("S")
  ; 
  /* Important Note: Must have semicolon at
   * the end when there is a enum field or method
   */
  private final String shortCode;
	  
  Directions(String code) {
      this.shortCode = code;
  }
	  
  public String getDirectionCode() {
      return this.shortCode;
  }
}
public class EnumDemo
{
    public static void main(String[] args) {
    	Directions dir = Directions.SOUTH;
    	System.out.println(dir.getDirectionCode());
    	Directions dir2 = Directions.EAST;
    	System.out.println(dir2.getDirectionCode());
    }
}



Important points to Note:

1) While defining Enums, the constants should be declared first, prior to any fields or methods.
2) When there are fields and methods declared inside Enum, the list of enum constants must end with a semicolon(;).



